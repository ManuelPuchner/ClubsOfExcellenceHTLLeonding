// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading: 
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Example {
    id String @id @default(cuid())
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?

    customImage    String?
    customUsername String?
    firstname      String?
    lastname       String?
    phoneNumber    String?

    accounts   Account[]
    sessions   Session[]
    User_Clubs User_Club?

    isNewUser              Boolean @default(true)
    isStudent              Boolean @default(false)
    emailVerificationToken String?

    adminOfClubs Club[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Club {
    id          String     @id @default(cuid())
    clubname    String
    description String
    image       String
    adminId     String
    admin       User       @relation(fields: [adminId], references: [id], onDelete: Cascade)
    User_Clubs  User_Club?
    qanda       QandA[]

    @@unique([clubname])
}

model QandA {
    id       String @id @default(cuid())
    clubId   String
    club     Club   @relation(fields: [clubId], references: [id], onDelete: Cascade)
    question String
    answer   String
}

model User_Club {
    id     String @id @default(cuid())
    userId String @unique
    clubId String @unique
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    club   Club   @relation(fields: [clubId], references: [id], onDelete: Cascade)
}
